/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package COMP603_A2_Uno;

import java.io.File;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author haydenwinterburn @ mustafa kamish
 */
public class PopUp extends javax.swing.JFrame {

    // Stores the image name for the selected card
    String cardImage = ""; 

    // Instance of the game currently being played
    Game game; 

    // Current player's hand of cards
    ArrayList<Card> playerHand; 

    // Index of the selected card in the player's hand
    int choice; 

    // List of buttons representing each card in the player's hand
    ArrayList<JButton> cardButtons; 

    // Reference to the main game window
    GameStage gamestage; 

    // Button displaying the top card in the play pile
    JButton topCardButton; 

    // Declared color for wildcard cards
    Card.Colour declaredColour; 

    public PopUp(Game game, int index, String cardName, ArrayList<JButton> cardButtons, GameStage gamestage, JButton topCardButton) {
        initComponents();

        cardImage = cardName; // Initialize card image name
        this.game = game; // Set the game instance
        playerHand = game.getPlayerHand(game.getCurrentPlayer()); // Get current player's hand
        choice = index; // Set selected card index
        this.cardButtons = cardButtons; // Set card button list
        this.gamestage = gamestage; // Set game stage reference
        this.topCardButton = topCardButton; // Set top card button reference

        String basePath = System.getProperty("user.dir") + "/resources/images/small/"; // Base path for images
        String imagePath = basePath + cardImage + ".png"; // Full path for selected card image
        File imgFile = new File(imagePath); // Create file reference for image

        if (imgFile.exists()) {
            cardLabel.setIcon(new ImageIcon(imgFile.getAbsolutePath())); // Display card image if available
        } else {
            System.out.println("Card image not found at path: " + imagePath); // Log missing image
            cardLabel.setText("Image not found"); // Display fallback text
        }

        // Set Enter key as shortcut to "Use Card" button
        jPanel1.getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).put(
            javax.swing.KeyStroke.getKeyStroke("ENTER"), "useCardAction");
        jPanel1.getActionMap().put("useCardAction", new javax.swing.AbstractAction() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                playCardButton.doClick(); // Simulate "Use Card" button click
            }
        });

        // Set Escape key as shortcut to "Cancel" button
        jPanel1.getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).put(
            javax.swing.KeyStroke.getKeyStroke("ESCAPE"), "cancelAction");
        jPanel1.getActionMap().put("cancelAction", new javax.swing.AbstractAction() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                cancelButton.doClick(); // Simulate "Cancel" button click
            }
        });

        setLocationRelativeTo(null); // Center the pop-up window on screen
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        playCardButton = new javax.swing.JButton();
        cardLabel = new javax.swing.JLabel();
        playCardLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(380, 300));
        setMinimumSize(new java.awt.Dimension(380, 300));

        jPanel1.setBackground(new java.awt.Color(220, 75, 75));
        jPanel1.setPreferredSize(new java.awt.Dimension(380, 300));
        jPanel1.setRequestFocusEnabled(false);

        cancelButton.setBackground(new java.awt.Color(229, 105, 105));
        cancelButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("CANCEL");
        cancelButton.setToolTipText("shortcut='Esc'");
        cancelButton.setBorderPainted(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        playCardButton.setBackground(new java.awt.Color(229, 105, 105));
        playCardButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        playCardButton.setForeground(new java.awt.Color(255, 255, 255));
        playCardButton.setText("PLAY CARD");
        playCardButton.setToolTipText("shortcut='ENTER'");
        playCardButton.setBorderPainted(false);
        playCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playCardButtonActionPerformed(evt);
            }
        });

        cardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        playCardLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        playCardLabel.setForeground(new java.awt.Color(255, 255, 255));
        playCardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playCardLabel.setText("DO YOU WANT TO PLAY THIS CARD?");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playCardLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(playCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(cardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(playCardLabel)
                .addGap(24, 24, 24)
                .addComponent(cardLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playCardButton)
                    .addComponent(cancelButton))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playCardButtonActionPerformed
        // TODO add your handling code here:
        // Open color selection frame for wild cards
    PickColourFrame pickColour = new PickColourFrame(this); 
    declaredColour = pickColour.chooseColour(playerHand.get(choice)); // Get selected color

    if (declaredColour != null) { 
        // Proceed if a color is selected
        try {
                game.submitPlayerCard(game.getCurrentPlayer(), playerHand.get(choice), declaredColour); // Submit selected card
            } catch (InvalidColourSubmissionException ex) {
                java.util.logging.Logger.getLogger(PopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); // Log color error
            } catch (InvalidPlayerTurnException ex) {
                java.util.logging.Logger.getLogger(PopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); // Log turn error
            } catch (InvalidValueSubmissionException ex) {
                java.util.logging.Logger.getLogger(PopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex); // Log value error
            }

            this.revalidate(); // Refresh pop-up layout

            // Update top card if color is not wild
            if (declaredColour != Card.Colour.Wild) {
                gamestage.setPidName(game.getCurrentPlayer()); // Update player ID label
                gamestage.setButtonIcons(); // Refresh card buttons
                gamestage.updateTopCardButton(); // Update top card display
                gamestage.updateTopCardColor(); // Update color display for top card
                this.dispose(); // Close pop-up window
            }
        }
    }//GEN-LAST:event_playCardButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PopUp().setVisible(true);
            }
        });
    }
    public PopUp(){}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cardLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton playCardButton;
    private javax.swing.JLabel playCardLabel;
    // End of variables declaration//GEN-END:variables
}
